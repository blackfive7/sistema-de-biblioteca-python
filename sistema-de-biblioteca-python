import sqlite3
import tkinter as tk
from tkinter import messagebox

# Função para conectar ao banco de dados
def connect_db():
    conn = sqlite3.connect('biblioteca.db')
    cursor = conn.cursor()
    return conn, cursor

# Função para adicionar autor
def add_autor():
    nome = entry_nome_autor.get()
    nacionalidade = entry_nacionalidade_autor.get()
    if not nome or not nacionalidade:
        messagebox.showerror('Erro', 'Todos os campos devem ser preenchidos.')
        return
    
    conn, cursor = connect_db()
    cursor.execute('INSERT INTO Autores (Nome, Nacionalidade) VALUES (?, ?)', (nome, nacionalidade))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Autor adicionado com sucesso!')
    clear_autor_entries()

def clear_autor_entries():
    entry_nome_autor.delete(0, tk.END)
    entry_nacionalidade_autor.delete(0, tk.END)

# Função para adicionar livro
def add_livro():
    titulo = entry_titulo_livro.get()
    ano = entry_ano_livro.get()
    genero = entry_genero_livro.get()
    autor_nome = entry_autor_nome_livro.get()  # Usar nome do autor

    if not titulo or not ano or not genero or not autor_nome:
        messagebox.showerror('Erro', 'Todos os campos devem ser preenchidos.')
        return

    conn, cursor = connect_db()
    # Verificar se o autor já existe e obter o ID
    cursor.execute('SELECT ID FROM Autores WHERE Nome = ?', (autor_nome,))
    autor = cursor.fetchone()
    
    if autor is None:
        messagebox.showerror('Erro', 'Autor não encontrado. Por favor, adicione o autor primeiro.')
        conn.close()
        return

    autor_id = autor[0]
    cursor.execute('INSERT INTO Livros (Titulo, AutorID, AnoPublicacao, Genero) VALUES (?, ?, ?, ?)', 
                   (titulo, autor_id, ano, genero))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Livro adicionado com sucesso!')
    clear_livro_entries()

def clear_livro_entries():
    entry_titulo_livro.delete(0, tk.END)
    entry_autor_nome_livro.delete(0, tk.END)
    entry_ano_livro.delete(0, tk.END)
    entry_genero_livro.delete(0, tk.END)

# Função para adicionar empréstimo
def add_emprestimo():
    livro_id = entry_livro_id.get()
    data_emp = entry_data_emp.get()
    data_dev = entry_data_dev.get()
    usuario = entry_nome_usuario.get()
    
    if not livro_id or not data_emp or not data_dev or not usuario:
        messagebox.showerror('Erro', 'Todos os campos devem ser preenchidos.')
        return

    conn, cursor = connect_db()
    cursor.execute('INSERT INTO Emprestimos (LivroID, DataEmprestimo, DataDevolucao, NomeUsuario) VALUES (?, ?, ?, ?)', 
                   (livro_id, data_emp, data_dev, usuario))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Empréstimo adicionado com sucesso!')
    clear_emprestimo_entries()

def clear_emprestimo_entries():
    entry_livro_id.delete(0, tk.END)
    entry_data_emp.delete(0, tk.END)
    entry_data_dev.delete(0, tk.END)
    entry_nome_usuario.delete(0, tk.END)

# Função para visualizar todos os livros
def view_livros():
    conn, cursor = connect_db()
    cursor.execute('SELECT Livros.ID, Livros.Titulo, Autores.Nome, Livros.AnoPublicacao, Livros.Genero '
                   'FROM Livros JOIN Autores ON Livros.AutorID = Autores.ID')
    livros = cursor.fetchall()
    conn.close()
    livros_list.delete(0, tk.END)
    for livro in livros:
        livros_list.insert(tk.END, f"ID: {livro[0]}, Título: {livro[1]}, Autor: {livro[2]}, Ano: {livro[3]}, Gênero: {livro[4]}")

# Função para visualizar todos os empréstimos
def view_emprestimos():
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Emprestimos')
    emprestimos = cursor.fetchall()
    conn.close()
    emprestimos_list.delete(0, tk.END)
    for emp in emprestimos:
        emprestimos_list.insert(tk.END, f"ID: {emp[0]}, LivroID: {emp[1]}, Data Emp: {emp[2]}, Data Dev: {emp[3]}, Usuário: {emp[4]}")

# Função para buscar livros por critérios
def search_books():
    titulo = entry_titulo_busca.get()
    autor = entry_autor_busca.get()
    ano = entry_ano_busca.get()
    genero = entry_genero_busca.get()
    
    conn, cursor = connect_db()
    query = 'SELECT Livros.ID, Livros.Titulo, Autores.Nome, Livros.AnoPublicacao, Livros.Genero ' \
            'FROM Livros JOIN Autores ON Livros.AutorID = Autores.ID WHERE 1=1'
    params = []
    
    if titulo:
        query += ' AND Livros.Titulo LIKE ?'
        params.append(f'%{titulo}%')
    if autor:
        query += ' AND Autores.Nome LIKE ?'
        params.append(f'%{autor}%')
    if ano:
        query += ' AND Livros.AnoPublicacao = ?'
        params.append(ano)
    if genero:
        query += ' AND Livros.Genero = ?'
        params.append(genero)
    
    cursor.execute(query, params)
    livros = cursor.fetchall()
    conn.close()
    resultados_list.delete(0, tk.END)
    
    if livros:
        for livro in livros:
            resultados_list.insert(tk.END, f"ID: {livro[0]}, Título: {livro[1]}, Autor: {livro[2]}, Ano: {livro[3]}, Gênero: {livro[4]}")
    else:
        messagebox.showinfo('Resultado', 'Nenhum livro encontrado com esses critérios.')

# Função para buscar empréstimos por critérios
def search_emprestimos():
    livro_id = entry_livro_id_busca.get()
    usuario = entry_nome_usuario_busca.get()
    data_emp = entry_data_emp_busca.get()
    data_dev = entry_data_dev_busca.get()
    
    conn, cursor = connect_db()
    query = 'SELECT * FROM Emprestimos WHERE 1=1'
    params = []
    
    if livro_id:
        query += ' AND LivroID = ?'
        params.append(livro_id)
    if usuario:
        query += ' AND NomeUsuario LIKE ?'
        params.append(f'%{usuario}%')
    if data_emp:
        query += ' AND DataEmprestimo = ?'
        params.append(data_emp)
    if data_dev:
        query += ' AND DataDevolucao = ?'
        params.append(data_dev)
    
    cursor.execute(query, params)
    emprestimos = cursor.fetchall()
    conn.close()
    resultados_emprestimos_list.delete(0, tk.END)
    
    if emprestimos:
        for emp in emprestimos:
            resultados_emprestimos_list.insert(tk.END, f"ID: {emp[0]}, LivroID: {emp[1]}, Data Emp: {emp[2]}, Data Dev: {emp[3]}, Usuário: {emp[4]}")
    else:
        messagebox.showinfo('Resultado', 'Nenhum empréstimo encontrado com esses critérios.')

# Interface gráfica com Tkinter
root = tk.Tk()
root.title('Sistema de Biblioteca')

# Frame para adicionar autores
frame_autor = tk.LabelFrame(root, text='Adicionar Autor')
frame_autor.grid(row=0, column=0, padx=10, pady=10)

tk.Label(frame_autor, text='Nome:').grid(row=0, column=0)
entry_nome_autor = tk.Entry(frame_autor)
entry_nome_autor.grid(row=0, column=1)

tk.Label(frame_autor, text='Nacionalidade:').grid(row=1, column=0)
entry_nacionalidade_autor = tk.Entry(frame_autor)
entry_nacionalidade_autor.grid(row=1, column=1)

tk.Button(frame_autor, text='Adicionar Autor', command=add_autor, bg='green', fg='white').grid(row=2, columnspan=2, pady=5)

# Frame para adicionar livros
frame_livro = tk.LabelFrame(root, text='Adicionar Livro')
frame_livro.grid(row=1, column=0, padx=10, pady=10)

tk.Label(frame_livro, text='Título:').grid(row=0, column=0)
entry_titulo_livro = tk.Entry(frame_livro)
entry_titulo_livro.grid(row=0, column=1)

tk.Label(frame_livro, text='Autor:').grid(row=1, column=0)
entry_autor_nome_livro = tk.Entry(frame_livro)
entry_autor_nome_livro.grid(row=1, column=1)

tk.Label(frame_livro, text='Ano Publicação:').grid(row=2, column=0)
entry_ano_livro = tk.Entry(frame_livro)
entry_ano_livro.grid(row=2, column=1)

tk.Label(frame_livro, text='Gênero:').grid(row=3, column=0)
entry_genero_livro = tk.Entry(frame_livro)
entry_genero_livro.grid(row=3, column=1)

tk.Button(frame_livro, text='Adicionar Livro', command=add_livro, bg='green', fg='white').grid(row=4, columnspan=2, pady=5)

# Frame para adicionar empréstimos
frame_emprestimo = tk.LabelFrame(root, text='Adicionar Empréstimo')
frame_emprestimo.grid(row=2, column=0, padx=10, pady=10)

tk.Label(frame_emprestimo, text='LivroID:').grid(row=0, column=0)
entry_livro_id = tk.Entry(frame_emprestimo)
entry_livro_id.grid(row=0, column=1)

tk.Label(frame_emprestimo, text='Data Empréstimo:').grid(row=1, column=0)
entry_data_emp = tk.Entry(frame_emprestimo)
entry_data_emp.grid(row=1, column=1)

tk.Label(frame_emprestimo, text='Data Devolução:').grid(row=2, column=0)
entry_data_dev = tk.Entry(frame_emprestimo)
entry_data_dev.grid(row=2, column=1)

tk.Label(frame_emprestimo, text='Nome Usuário:').grid(row=3, column=0)
entry_nome_usuario = tk.Entry(frame_emprestimo)
entry_nome_usuario.grid(row=3, column=1)

tk.Button(frame_emprestimo, text='Adicionar Empréstimo', command=add_emprestimo, bg='green', fg='white').grid(row=4, columnspan=2, pady=5)

# Frame para visualizar dados
frame_visualizar = tk.LabelFrame(root, text='Visualizar Dados')
frame_visualizar.grid(row=0, column=1, rowspan=3, padx=10, pady=10)

livros_list = tk.Listbox(frame_visualizar, height=10, width=50)
livros_list.grid(row=0, column=0)
tk.Button(frame_visualizar, text='Visualizar Livros', command=view_livros, bg='green', fg='white').grid(row=1, column=0)

emprestimos_list = tk.Listbox(frame_visualizar, height=10, width=50)
emprestimos_list.grid(row=2, column=0)
tk.Button(frame_visualizar, text='Visualizar Empréstimos', command=view_emprestimos, bg='green', fg='white').grid(row=3, column=0)

# Frame para buscar livros
frame_busca_livro = tk.LabelFrame(root, text='Buscar Livro')
frame_busca_livro.grid(row=3, column=0, padx=10, pady=10)

tk.Label(frame_busca_livro, text='Título:').grid(row=0, column=0)
entry_titulo_busca = tk.Entry(frame_busca_livro)
entry_titulo_busca.grid(row=0, column=1)

tk.Label(frame_busca_livro, text='Autor:').grid(row=1, column=0)
entry_autor_busca = tk.Entry(frame_busca_livro)
entry_autor_busca.grid(row=1, column=1)

tk.Label(frame_busca_livro, text='Ano:').grid(row=2, column=0)
entry_ano_busca = tk.Entry(frame_busca_livro)
entry_ano_busca.grid(row=2, column=1)

tk.Label(frame_busca_livro, text='Gênero:').grid(row=3, column=0)
entry_genero_busca = tk.Entry(frame_busca_livro)
entry_genero_busca.grid(row=3, column=1)

tk.Button(frame_busca_livro, text='Buscar', command=search_books, bg='green', fg='white').grid(row=4, columnspan=2, pady=5)

resultados_list = tk.Listbox(frame_busca_livro, height=10, width=50)
resultados_list.grid(row=5, column=0, columnspan=2)

# Frame para buscar empréstimos
frame_busca_emprestimo = tk.LabelFrame(root, text='Buscar Empréstimo')
frame_busca_emprestimo.grid(row=3, column=1, padx=10, pady=10)

tk.Label(frame_busca_emprestimo, text='LivroID:').grid(row=0, column=0)
entry_livro_id_busca = tk.Entry(frame_busca_emprestimo)
entry_livro_id_busca.grid(row=0, column=1)

tk.Label(frame_busca_emprestimo, text='Nome Usuário:').grid(row=1, column=0)
entry_nome_usuario_busca = tk.Entry(frame_busca_emprestimo)
entry_nome_usuario_busca.grid(row=1, column=1)

tk.Label(frame_busca_emprestimo, text='Data Empréstimo:').grid(row=2, column=0)
entry_data_emp_busca = tk.Entry(frame_busca_emprestimo)
entry_data_emp_busca.grid(row=2, column=1)

tk.Label(frame_busca_emprestimo, text='Data Devolução:').grid(row=3, column=0)
entry_data_dev_busca = tk.Entry(frame_busca_emprestimo)
entry_data_dev_busca.grid(row=3, column=1)

tk.Button(frame_busca_emprestimo, text='Buscar', command=search_emprestimos, bg='green', fg='white').grid(row=4, columnspan=2, pady=5)

resultados_emprestimos_list = tk.Listbox(frame_busca_emprestimo, height=10, width=50)
resultados_emprestimos_list.grid(row=5, column=0, columnspan=2)

root.mainloop()
